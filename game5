#ifndef Numerical
#define Numerical
#include <iostream>
#include <iomanip>
#include <cctype>
#include "BoardGame_Classes.h"
using namespace std;
template <typename T>
class NumericalB: public Board<T> {
public:
    NumericalB ();
    bool update_board (int x , int y , T symbol);
    void display_board () ;
    bool is_win() ;
    bool is_draw();
    bool game_is_over();
    int n_moves = 1;
    int valid_numbers[9] = {0};
};
template <typename T>
class NumericalP : public Player<T> {
public:
    NumericalP (string name, T symbol);
    void getmove(int& x, int& y) ;
};
template <typename T>
class Random : public RandomPlayer<T>{
public:
    Random (string name, T symbol);
    void getmove(int &x, int &y) ;
};
template <typename T>
NumericalB<T>::NumericalB() {
    this->rows = this->columns = 3;
    this->board = new int*[this->rows];
    for (int i = 0; i < this->rows; i++) {
        this->board[i] = new int[this->columns];
        for (int j = 0; j < this->columns; j++) {
            this->board[i][j] = 0;
        }
    }
    this->n_moves = 0;
}
template <typename T>
bool NumericalB<T>::update_board(int x, int y, T mark) {

    if (valid_numbers[mark] == 1 || mark == 0) {
        return false;
    }
    if (this->n_moves % 2 == 0 && mark % 2 == 0) {
        return false;
    }
    if (this->n_moves % 2 == 1 && mark % 2 == 1) {
        return false;
    }
    if (!(x < 0 || x >= this->rows || y < 0 || y >= this->columns) && (this->board[x][y] == 0|| mark == 0)) {
        if (mark == 0){
            this->n_moves--;
            this->board[x][y] = 0;
        }
        else {
            this->n_moves++;
            this->board[x][y] = mark;
        }
        valid_numbers[mark] = 1;
        return true;
    }
    return false;
}
template <typename T>
void NumericalB<T>::display_board() {
    for (int i = 0; i < this->rows; i++) {
        cout << "\n| ";
        for (int j = 0; j < this->columns; j++) {
            cout << "(" << i << "," << j << ")";
            cout << setw(2) << this->board[i][j] << " |";
        }
        cout << "\n-----------------------------";
    }
    cout << endl;
}
template <typename T>
bool NumericalB<T>::is_win() {
    for (int i = 0; i < this->rows; ++i) {
        if (this->board[i][0] + this->board[i][1] + this->board[i][2] == 15 &&
            this->board[i][0] != 0 && this->board[i][1] != 0 && this->board[i][2] != 0) {
            return true;
        }
    }
    for (int j = 0; j < this->columns; ++j) {
        if (this->board[0][j] + this->board[1][j] + this->board[2][j] == 15 &&
            this->board[0][j] != 0 && this->board[1][j] != 0 && this->board[2][j] != 0) {
            return true;
        }
    }
    if (this->board[0][0] + this->board[1][1] + this->board[2][2] == 15 &&
        this->board[0][0] != 0 && this->board[1][1] != 0 && this->board[2][2] != 0) {
        return true;
    }
    if (this->board[0][2] + this->board[1][1] + this->board[2][0] == 15 &&
        this->board[0][2] != 0 && this->board[1][1] != 0 && this->board[2][0] != 0) {
        return true;
    }
    return false;

}
template <typename T>
bool NumericalB<T>::is_draw() {
    return (this->n_moves == 9 && !is_win());
}

template <typename T>
bool NumericalB<T>::game_is_over() {
    return is_win() || is_draw();
}

template <typename T>
NumericalP<T>::NumericalP(string name, T symbol) : Player<T>(name, symbol) {}

template <typename T>
void NumericalP<T>::getmove(int& x, int& y) {
    cout << "\nPlease enter your move x and y (0 to 2) separated by spaces: " << endl;
    cin >> x >> y;

    int move;
    cout << "Select your number" << endl;
    cin >> move;
    this->symbol = move;
}
template <typename T>
Random<T>::Random(string name, T symbol) : RandomPlayer<T>(symbol) {
    this->dimension = 3;
    this->name = name + " Random Computer Player";
    srand(static_cast<unsigned int>(time(0)));
}
template <typename T>
void Random<T>::getmove(int& x, int& y) {
    x = rand() % this->dimension;
    y = rand() % this->dimension;
    int move;
    move = rand() % 10;
    this->symbol = move;
}
#endif //Numerical
